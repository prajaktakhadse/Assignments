//Write a program that will result in a deadlock. How will you fix deadlock in Java show with
//examples? And Explain about wait() and notify() method.

ans:-
deadlock:- it is the situation where threads are blocked forever with each other.



class A {
public synchronized void funA(B b1){
System.out.println("funA of A starts");
b1.fun2();
System.out.println("funA of A ends");
}
public synchronized void fun1(){
System.out.println("inside fun1 of A");
}
}
class B {
public synchronized void funB(A a1){
System.out.println("funB of B starts");
a1.fun1();
System.out.println("funB of B ends");
}

public synchronized void fun2(){
System.out.println("inside fun2 of B");
}
}
class ThreadA extends Thread{
A a1;
B b1;
public ThreadA(A a1,B b1) {
this.b1=b1;
this.a1=a1;
}
@Override
public void run() {
a1.funA(b1);
}
}
class ThreadB extends Thread{
A a1;
B b1;
public ThreadB(A a1,B b1) {
this.b1=b1;
this.a1=a1;
}
@Override
public void run() {
b1.funB(a1);
}
}
class Main {
public static void main(String[] args) {
A a1 = new A();
B b1 = new B();
ThreadA t1 = new ThreadA(a1, b1);
ThreadB t2 = new ThreadB(a1, b1);
t1.start();
t2.start();
}
}

--Wait:-
   The wait() method causes to the current thread to give up the lock and go to sleep until some other thread enters and calls notify().
  
   
--notify():-
    This method is used to notify the threads that it needs to function. It wakes up one thread that called the wait() method on the same object.